/* Generated By:JavaCC: Do not edit this line. GameParser.java */
package edu.curtin.saed.assignment2.Parser;

import java.util.*;

public class GameParser implements GameParserConstants {
    public static void main(String[] args) throws ParseException {
        GameParser parser = new GameParser(System.in);
        parser.parse();
    }

// Main Parsing Rules
  static final public void parse() throws ParseException {
    sizeDeclaration();
    startDeclaration();
    goalDeclaration();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ITEM:
      case OBSTACLE:
      case PLUGIN:
      case SCRIPT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ITEM:
        itemDeclaration();
        break;
      case OBSTACLE:
        obstacleDeclaration();
        break;
      case PLUGIN:
        pluginDeclaration();
        break;
      case SCRIPT:
        scriptDeclaration();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static final public void sizeDeclaration() throws ParseException {
    int rows, cols;
    jj_consume_token(SIZE);
    jj_consume_token(LPAREN);
    rows = integer();
    jj_consume_token(COMMA);
    cols = integer();
    jj_consume_token(RPAREN);
                                                                         GameData.size = new int[]{rows, cols};
  }

  static final public void startDeclaration() throws ParseException {
    int row, col;
    jj_consume_token(START);
    jj_consume_token(LPAREN);
    row = integer();
    jj_consume_token(COMMA);
    col = integer();
    jj_consume_token(RPAREN);
                                                                        GameData.start = new int[]{row, col};
  }

  static final public void goalDeclaration() throws ParseException {
    int row, col;
    jj_consume_token(GOAL);
    jj_consume_token(LPAREN);
    row = integer();
    jj_consume_token(COMMA);
    col = integer();
    jj_consume_token(RPAREN);
                                                                       GameData.goal = new int[]{row, col};
  }

  static final public void itemDeclaration() throws ParseException {
    String name;
    ArrayList positions = new ArrayList();  // Avoid using generics directly
    String message;
    jj_consume_token(ITEM);
    name = quotedString();
    jj_consume_token(LBRACE);
    jj_consume_token(AT);
    positionList(positions);
    jj_consume_token(MESSAGE);
    message = quotedString();
    jj_consume_token(RBRACE);
        GameData.items.add(new GameData.Item(name, (List<int[]>) positions, message));
  }

  static final public void obstacleDeclaration() throws ParseException {
    ArrayList positions = new ArrayList();  // Avoid using generics directly
    ArrayList requirements = new ArrayList();
    jj_consume_token(OBSTACLE);
    jj_consume_token(LBRACE);
    jj_consume_token(AT);
    positionList(positions);
    jj_consume_token(REQUIRES);
    requirementList(requirements);
    jj_consume_token(RBRACE);
        GameData.obstacles.add(new GameData.Obstacle((List<int[]>) positions, (List<String>) requirements));
  }

  static final public void pluginDeclaration() throws ParseException {
    String pluginName;
    jj_consume_token(PLUGIN);
    pluginName = identifier();
                                         GameData.plugins.add(pluginName);
  }

  static final public void scriptDeclaration() throws ParseException {
    String scriptCode;
    jj_consume_token(SCRIPT);
    jj_consume_token(EXCLAM);
    jj_consume_token(LBRACE);
    scriptCode = freeFormString();
    jj_consume_token(RBRACE);
                                                                        GameData.scripts.add(scriptCode);
  }

// Helper Parsing Rules
  static final public int integer() throws ParseException {
    Token t;
    t = jj_consume_token(NUMBER);
                   {if (true) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  static final public String quotedString() throws ParseException {
    Token t;
    t = jj_consume_token(STRING);
                   {if (true) return t.image.substring(1, t.image.length() - 1);}
    throw new Error("Missing return statement in function");
  }

  static final public void positionList(ArrayList positions) throws ParseException {
    int row, col;
    jj_consume_token(LPAREN);
    row = integer();
    jj_consume_token(COMMA);
    col = integer();
    jj_consume_token(RPAREN);
                                                                positions.add(new int[]{row, col});
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      jj_consume_token(LPAREN);
      row = integer();
      jj_consume_token(COMMA);
      col = integer();
      jj_consume_token(RPAREN);
                                                                          positions.add(new int[]{row, col});
    }
  }

  static final public void requirementList(ArrayList requirements) throws ParseException {
    String item;
    item = quotedString();
                            requirements.add(item);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      item = quotedString();
                                      requirements.add(item);
    }
  }

  static final public String identifier() throws ParseException {
    Token t;
    t = jj_consume_token(STRING);
                   {if (true) return t.image.substring(1, t.image.length() - 1);}
    throw new Error("Missing return statement in function");
  }

  static final public String freeFormString() throws ParseException {
    Token t;
    t = jj_consume_token(STRING);
                   {if (true) return t.image.substring(1, t.image.length() - 1);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GameParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf00,0xf00,0x80000,0x80000,};
   }

  /** Constructor with InputStream. */
  public GameParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GameParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GameParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GameParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GameParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GameParser(GameParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GameParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
